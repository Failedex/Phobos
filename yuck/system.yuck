(defvar revealsystem false)

(defwindow system 
  :geometry (geometry
              :x 0 
              :y 20 
              :width 0
              :height 300
              :anchor "bottom right")
  :stacking "overlay"
  :exclusive false 
  :monitor '["eDP-1", "<primary>", 0]'
  (revealer 
    :reveal revealsystem
    :transition "slideleft"
    (box 
      :orientation "v"
      :space-evenly false 
      :style "margin-right: 20px;"
      :spacing 16
      (floatwin 
        :title "Media"
        :visible {playerctl.song != ""}
        (mediawid))
        
      (floatwin 
        :title "System"
        (systemwid)))))

(defvar revealsystemint false)

(defwindow systemint 
  :geometry (geometry
              :x 0 
              :y -70 
              :width 0
              :height 70
              :anchor "bottom right")
  :stacking "overlay"
  :exclusive false 
  :monitor '["eDP-1", "<primary>", 0]'
  (box 
    :orientation "v"
    :space-evenly false 
    :height 70
    (revealer 
      :halign "end"
      :reveal revealsystemint
      :transition "slideleft"
        (box 
          :orientation "v"
          :space-evenly false
          :style "margin-left: 20px;"

          ;; triangle corner 
          (box 
            :height 20
            :orientation "h"
            :space-evenly false 
            (box 
              :orientation "v"
              :space-evenly false 
              (box 
                :class "triangle bottomright")
              (box 
                :class "window"
                :vexpand true))
            (box 
              :class "window"
              :hexpand true))

          (box
            :class "window"
            (box 
              :style "margin: -20px 0px;"
              (systemwid)))))

    (bottomrightstruct)))
          

(defwidget systemwid []
  (box 
    :orientation "v"
    :space-evenly false 
    :width 404
    :vexpand true 
    :class "window cont trans"
    (box 
      :orientation "h"
      :space-evenly false 
      :class "window cont"
      :visible {playerctl.song != ""}
      (image 
        :image-width 35 
        :path "./assets/icons/libmedia.svg")
      (label 
        :text "Media"))
    (mediawid)
    (slidectl
      :icon {volumemute ? "./assets/icons/volumemute.svg" : "./assets/icons/volume.svg"}
      :val volume
      :name "Volume"
      :onchange "pamixer --set-volume {}")
    (slidectl
      :icon "./assets/icons/sun.svg"
      :val brightness
      :name "Brightness"
      :onchange "brightnessctl set {}%")
    (togglectl 
      :icon {wifiradio == "enabled" ? "./assets/icons/wifi.svg" : "./assets/icons/wifioff.svg"}
      :val {wifiradio == "enabled"} 
      :name "Wifi"
      :command {wifiradio == "enabled" ? "nmcli radio wifi off" : "nmcli radio wifi on"})
    (togglectl 
      :icon "./assets/icons/bluetooth.svg"
      :val {bluetooth != "disabled"} 
      :name "Bluetooth"
      :command "./scripts/bluetooth.sh --toggle")
    (togglectl 
      :icon "./assets/icons/bell.svg"
      :val {!notifications.dnd} 
      :name "Notifications"
      :command "./scripts/notifManage --toggle")))

(defwidget slidectl [icon onchange val name]
  (box 
    :orientation "v"
    :space-evenly false 
    (box 
      :orientation "h"
      :space-evenly false
      :class "window cont"
      (image 
        :image-width 35
        :path icon)
      (label 
        :text name))
    (overlay
      (scale 
        :value val
        :onchange onchange)
      (box 
        :halign "start"
        :valign "start"
        :style "margin: 4px;"
        :class "triangle topleft")
      (box 
        :halign "end"
        :valign "end"
        :style "margin: 4px;"
        :class "triangle bottomright"))))
   
(defwidget togglectl [icon name command val]
  (box 
    :class "window cont"
    :orientation "h"
    :space-evenly false 
    (image 
      :image-width 35 
      :path icon)
    (label 
      :text name)
    (box 
      :hexpand true)
    (eventbox
      :cursor "pointer"
      :onclick command
      (overlay
        (box
          :class "switch ${val ? 'on' : 'off'}"
          (box 
            :width 30
            :class "knob"))
          ; (box 
          ;   :class "switchbg"
          ;   :hexpand true))
        (box 
          :halign "start"
          :valign "start"
          :style "margin: 4px;"
          :class "triangle topleft")
        (box 
          :halign "end"
          :valign "end"
          :style "margin: 4px;"
          :class "triangle bottomright")))))
        
    
