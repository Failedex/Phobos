(defvar revealsystem false)

(defwindow system 
  :geometry (geometry
              :x 0 
              :y 20 
              :width 0
              :height 300
              :anchor "bottom right")
  :stacking "overlay"
  :exclusive false 
  :monitor '["eDP-1", "<primary>", 0]'
  (revealer 
    :reveal revealsystem
    :transition "slideleft"
    (box 
      :space-evenly false 
      :style "margin-right: 20px;"
      (floatwin 
        :title "System"
        (box 
          :orientation "v"
          :space-evenly false 
          :width 400
          :vexpand true 
          :class "window cont"
          (slidectl
            :icon {volumemute ? "./assets/icons/volumemute.svg" : "./assets/icons/volume.svg"}
            :val volume
            :name "Volume"
            :onchange "pamixer --set-volume {}")
          (slidectl
            :icon "./assets/icons/sun.svg"
            :val brightness
            :name "Brightness"
            :onchange "brightnessctl set {}%")
          (togglectl 
            :icon {wifiradio == "enabled" ? "./assets/icons/wifi.svg" : "./assets/icons/wifioff.svg"}
            :val {wifiradio == "enabled"} 
            :name "Wifi"
            :command {wifiradio == "enabled" ? "nmcli radio wifi off" : "nmcli radio wifi on"})
          (togglectl 
            :icon "./assets/icons/bluetooth.svg"
            :val {bluetooth != "disabled"} 
            :name "Bluetooth"
            :command "./scripts/bluetooth.sh --toggle")
          (togglectl 
            :icon "./assets/icons/bell.svg"
            :val {!notifications.dnd} 
            :name "Notifications"
            :command "./scripts/notifManage --toggle"))))))

(defvar testval false)

(defwidget slidectl [icon onchange val name]
  (box 
    :orientation "v"
    :space-evenly false 
    (box 
      :orientation "h"
      :space-evenly false
      :class "window cont"
      (image 
        :image-width 35
        :path icon)
      (label 
        :text name))
    (overlay
      (scale 
        :value val
        :onchange onchange)
      (box 
        :halign "start"
        :valign "start"
        :style "margin: 4px;"
        :class "triangle topleft")
      (box 
        :halign "end"
        :valign "end"
        :style "margin: 4px;"
        :class "triangle bottomright"))))
   
(defwidget togglectl [icon name command val]
  (box 
    :class "window cont"
    :orientation "h"
    :space-evenly false 
    (image 
      :image-width 35 
      :path icon)
    (label 
      :text name)
    (box 
      :hexpand true)
    (button
      :onclick command
      (overlay
        (box
          :class "switch ${val ? 'on' : 'off'}"
          (box 
            :width 30
            :class "knob"))
          ; (box 
          ;   :class "switchbg"
          ;   :hexpand true))
        (box 
          :halign "start"
          :valign "start"
          :style "margin: 4px;"
          :class "triangle topleft")
        (box 
          :halign "end"
          :valign "end"
          :style "margin: 4px;"
          :class "triangle bottomright")))))
        
    
